<?php

/**
 * @file
 * Allows restricting access to menu items per role.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function menu_per_role_form_menu_link_content_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'menu_link_content_menu_link_content_form') {
    // Handle Menulink Add and Update.
    if (!(\Drupal::currentUser()->hasPermission('administer menu_per_role'))) {
      return;
    }

    $default_value_roles = array();
    $default_value_hide_from_roles = array();
    // To get the Plugin ID of menu item.
    if (property_exists($form_state->getFormObject(), 'entity')) {
      $menu_link = $form_state->getFormObject()->getEntity();
      if (is_object($menu_link)) {
        $mlid = $menu_link->getPluginId();
        $default_value_roles = _menu_per_role_get_roles($mlid, 0);
        $default_value_hide_from_roles = _menu_per_role_get_roles($mlid, 1);
      }
    }
    $form['menu_per_role'] = array(
      '#type' => 'fieldset',
      '#title' => t('Restrict item visibility'),
      '#open' => FALSE,
      '#weight' => 5,
      '#description' => t('Check to know whether the user has proper visibility permissions to see this menu item. Note that both checks are always performed.'),
    );

    $form['menu_per_role']['menu_per_role_roles'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Show menu item only to selected roles'),
      '#options' => user_role_names(),
      '#default_value' => $default_value_roles,
      '#description' => t('Check no role to leave the access permission to the default. A user who is not part of at least one of the selected roles will not see this menu item.'),
    );

    $form['menu_per_role']['menu_per_role_hide_from_roles'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Hide menu item from selected roles'),
      '#options' => user_role_names(),
      '#default_value' => $default_value_hide_from_roles,
      '#description' => t('Check no role to leave the access permission to the default. A user who is part of any one of these roles will not see this menu item.'),
    );
    $form['actions']['submit']['#submit'][] = 'menu_per_role_menu_submit_handler';
  }
}

/**
 * Implements hook_form_alter().
 */
function menu_per_role_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == "menu_link_content_menu_link_content_delete_form") {
    // Handle Menulink delete.
    $form['actions']['submit']['#submit'][] = 'menu_per_role_menu_delete_handler';
  }
}

/**
 * Submit function for menu add / edit form.
 */
function menu_per_role_menu_submit_handler(&$form, FormStateInterface $form_state) {
  $menu_link = $form_state->getFormObject()->getEntity();
  $menu_id = $menu_link->getPluginId();

  $access_check = $form_state->getValue('menu_per_role_hide_from_roles');
  // Hide but to those roles.
  $rids_str = _menu_per_role_serialize_rids($form_state->getValue('menu_per_role_roles'));

  // Show but to those roles.
  $hrids_str = _menu_per_role_serialize_rids($form_state->getValue('menu_per_role_hide_from_roles'));

  \Drupal::database()->merge('menu_per_role')
    ->key(array('mlid' => $menu_id))
    ->insertFields(array(
      'mlid' => $menu_id,
      'rids' => $rids_str,
      'hrids' => $hrids_str,
    ))
    ->updateFields(array(
      'rids' => $rids_str,
      'hrids' => $hrids_str,
    ))->execute();
}

/**
 * Implements hook_preprocess_menu().
 */
function menu_per_role_preprocess_menu(&$variables) {
  $items = $variables['items'];
  $accessible_items = array();
  foreach ($items as $key => $item) {
    // Avoid checking the role if the item access is already false.
    $user_role_visiblity = _menu_per_role_access($key);
    if ($user_role_visiblity === TRUE) {
      continue;
    }
    else {
      $accessible_items[$key] = $item;
    }
  }
  $variables['items'] = $accessible_items;
}

/**
 * Custom Delete handler to remove Menulink.
 */
function menu_per_role_menu_delete_handler(&$form, FormStateInterface $form_state) {
  $menu_link = $form_state->getFormObject()->getEntity();
  $menu_id = $menu_link->getPluginId();
  // Delete the record from our table.
  \Drupal::database()->delete('menu_per_role')
    ->condition('mlid', $menu_id)
    ->execute();
}

/**
 * Determines access for a give menu item id.
 *
 * \param[in] $mlid The menu item identifier.
 *
 * \return NULL if this module does not forbid the viewing of this menu item,
 * FALSE otherwise
 */
function _menu_per_role_access($mlid) {

  $user = \Drupal::currentUser();

  if (empty($mlid)) {
    return NULL;
  }

  $arg = explode('/', \Drupal::request()->getpathInfo());
  // If menu is being edited allow user to see it in full.
  if ($arg[1] == 'admin' && $arg[2] == 'structure' && $arg[3] == 'menu') {
    return NULL;
  }
  // Check whether this role has visibility access (must be present).
  $rids = _menu_per_role_get_roles($mlid, 0);
  if (!empty($rids) && count(array_intersect($rids, $user->getRoles())) == 0) {
    // Not permitted by the rids.
    return TRUE;
  }

  // Check whether this role has visibility access (must not be present).
  $hrids = _menu_per_role_get_roles($mlid, 1);
  if (!empty($hrids) && count(array_intersect($hrids, $user->getRoles())) > 0) {
    // Not permitted by the hrids.
    return TRUE;
  }

  // This module is not preventing user from seeing this menu entry.
  return NULL;
}

/**
 * Turn the given roles into a serialized string of rids or hrids.
 */
function _menu_per_role_serialize_rids($roles) {
  $rids = array();

  foreach ($roles as $rid => $checked) {
    if ($checked) {
      $rids[] = $rid;
    }
  }

  return implode(',', $rids);
}

/**
 * Turn a serialized string of rids or hrids into an array of rids or hrids.
 */
function _menu_per_role_unserialize_rids($rids) {
  return explode(',', $rids);
}

/**
 * Gets all roles with access to the specified menu item.
 */
function _menu_per_role_get_roles($mlid, $show) {
  static $menu_per_role;

  if (!isset($menu_per_role)) {
    // Read all the data ONCE, it is likely very small.
    $menu_per_role = array();
    $query = \Drupal::database()->select('menu_per_role', 'mpr');
    $query->fields('mpr', ['mlid', 'rids', 'hrids']);
    $result = $query->execute();
    while ($row = $result->fetchAssoc()) {
      if (isset($row['rids']) || isset($row['hrids'])) {
        if (isset($row['rids'])) {
          $menu_per_role[$row['mlid']][0] = _menu_per_role_unserialize_rids($row['rids']);
        }
        else {
          $menu_per_role[$row['mlid']][0] = array();
        }
        if (isset($row['hrids'])) {
          $menu_per_role[$row['mlid']][1] = _menu_per_role_unserialize_rids($row['hrids']);
        }
        else {
          $menu_per_role[$row['mlid']][1] = array();
        }
      }
    }
  }
  if (isset($menu_per_role[$mlid])) {
    return $menu_per_role[$mlid][$show];
  }

  // Not defined, everyone has the right to use it.
  return array();
}
